package com.welldo.zero.calc_2;

/**
 * 移位运算
 * 在计算机中，整数总是以二进制的形式表示。例如，int类型的整数7使用4字节表示的二进制如下：
 * 00000000 0000000 0000000 00000111
 *
 *可以对整数进行移位运算。对整数7左移1位将得到整数14，左移两位将得到整数28：
 * int n = 7;       // 00000000 00000000 00000000 00000111 = 7
 * int a = n << 1;  // 00000000 00000000 00000000 00001110 = 14
 * int b = n << 2;  // 00000000 00000000 00000000 00011100 = 28
 * int c = n << 28; // 01110000 00000000 00000000 00000000 = 1879048192
 * int d = n << 29; // 11100000 00000000 00000000 00000000 = -536870912
 * 左移29位时，由于最高位变成1，因此结果变成了负数。
 *
 *
 * 类似的，对整数7进行右移，结果如下：
 * int n = 7;       // 00000000 00000000 00000000 00000111 = 7
 * int a = n >> 1;  // 00000000 00000000 00000000 00000011 = 3
 * int b = n >> 2;  // 00000000 00000000 00000000 00000001 = 1
 * int c = n >> 3;  // 00000000 00000000 00000000 00000000 = 0
 *
 *
 * 如果对一个负数进行右移，最高位的1不动，结果仍然是一个负数：(用得不多,不用研究)
 * int n = -536870912;
 * int a = n >> 1;  // 11110000 00000000 00000000 00000000 = -268435456
 * int b = n >> 2;  // 11111000 00000000 00000000 00000000 = -134217728
 * int c = n >> 28; // 11111111 11111111 11111111 11111110 = -2
 * int d = n >> 29; // 11111111 11111111 11111111 11111111 = -1
 *
 *
 * 仔细观察可发现，左移实际上就是不断地×2，右移实际上就是不断地÷2。
 *
 *
 * @author welldo
 * @date 2020/8/6
 */
public class MoveBit2 {
    public static void main(String[] args) {
        int n = 7;

        //向左
        System.out.println(n << 1);
        System.out.println(n << 2);
        System.out.println(n << 28);
        System.out.println(n << 29);

        //向右
        System.out.println(n >> 1);
        System.out.println(n >> 2);
        System.out.println(n >> 3);
        System.out.println(n >> 4);
    }
}
