package com.welldo.zero.calc_2;

/**
 * 整数运算
 * 整数, 不但表示方法是精确的，而且运算永远是精确的，
 * 即使是除法, 也是精确的，因为两个整数相除只能得到结果的整数部分：
 *
 * @author welldo
 * @date 2020/8/6
 */
public class Calc1 {
    public static void main(String[] args) {

        int x = 12345 / 67; // 184
        System.out.println(x);

        int y = 12345 % 67; // 求余数，17
        System.out.println(y);


        /*
        溢出
        要特别注意，整数由于存在范围限制，
        如果计算结果超出了范围，就会产生溢出，而溢出不会出错，却会得到一个奇怪的结果：

        我们把整数 2147483640 和15换成二进制做加法：
        0111 1111 1111 1111 1111 1111 1111 1000
      + 0000 0000 0000 0000 0000 0000 0000 1111
        -----------------------------------------
        1000 0000 0000 0000 0000 0000 0000 0111
        由于最高位计算结果为1，因此，加法结果变成了一个负数。

        要解决上面的问题，可以把int换成long类型，由于long可表示的整型范围更大，所以结果就不会溢出：
         */
        int a = 2_147_483_640;
        int b = 15;
        System.out.println(a + b); // -2147483641
    }

}
