package com.welldo.zero.a2_calc;

/**
 * 位运算
 * 位运算是按位进行与、或、非和异或的运算。可以用 0/1 来运算, 也可以用 true/false 来运算(这种更常用)
 *
 * 1. 与运算的规则是，必须两个数同时为1，结果才为1：(true/false运算不举例)
 * n = 0 & 0; // 0
 * n = 0 & 1; // 0
 * n = 1 & 1; // 1
 *
 * 2. 或运算的规则是，只要任意一个为1，结果就为1：(true/false运算不举例)
 * n = 0 | 0; // 0
 * n = 1 | 0; // 1
 * n = 1 | 1; // 1
 *
 * 对两个整数进行位运算，实际上就是按位对齐，然后依次对每一位进行运算。例如：
 * int i = 167_776_589; // 00001010 00000000 00010001 01001101
 * int n = 167_776_512; // 00001010 00000000 00010001 00000000
 * System.out.println(i & n); // 167776512
 *
 *
 * 3. 非运算, 真假互换(true/false运算不举例)
 * (todo 0/1 运算, 没搞懂)
 *
 * 4. 异或运算的规则是，如果两个数不同，结果为1，否则为0：(true/false运算不举例)
 * 记忆小技巧: 异性恋, 性别不同才为真
 * n = 0 ^ 0; // 0
 * n = 0 ^ 1; // 1
 * n = 1 ^ 1; // 0
 * n = 2 ^ 1; // 3, 计算方式, 0010^0001 = 0011=3
 *
 * @author welldo
 * @date 2020/8/6
 */
public class BitCalc3 {
    public static void main(String[] args) {
        int i = 167_776_589; // 00001010 00000000 00010001 01001101
        int n = 167_776_512; // 00001010 00000000 00010001 00000000
        System.out.println(i & n); // 167776512

        //todo 没搞懂
        // 00001010 .00000000. 00010001. 01001101 = 10.0.17.77
        // 00001010. 00000000. 00010001. 00000000 = 10.0.17.0
        //上述按位与运算实际上可以看作两个整数表示的IP地址10.0.17.77和10.0.17.0，
        // 通过与运算，可以快速判断一个IP是否在给定的网段内。
    }
}
